name: Python CI Pipeline

# Trigger the pipeline on push or pull requests to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest  # You can specify different runners, like macos or windows, depending on your needs

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Specify the Python version you need

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Make sure your dependencies are listed in requirements.txt

      # Install Black for code formatting
      - name: Install Black
        run: |
          pip install black

      # Run Black to format the code
      - name: Run Black - Format Code
        run: |
          black .  # This formats all the Python files in the repository

      # (Optional) Commit and push changes made by Black if any formatting is done
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git diff --cached --exit-code || git commit -m "Format code with Black" && git push

      # Run tests with unittest
      - name: Run unit tests
        run: |
          python -m unittest discover -s tests -p "Tests_*.py"  # Use the appropriate pattern to match your test files

      # (Optional) Upload test results as artifacts
      - name: Upload test results
        if: failure()  # Upload if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-reports  # Path to the test report directory

      # (Optional) Cache dependencies to speed up future workflows
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-cache-

      # (Optional) Notify on failure (e.g., via email, Slack, etc.)
      # - name: Notify on failure
      #   uses: some-action-for-notification